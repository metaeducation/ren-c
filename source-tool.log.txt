
[started [init]]
[started [r-source/process]]
[finished [r-source/process] 0:00:00.008]
[started [c-source/process]]
[started [parse-files]]
[not-parsed %core/a-stubs.c]
[not-parsed %core/f-int.c]
[not-parsed %os/generic/iso-3166.c]
[not-parsed %os/generic/iso-639.c]
[not-parsed %os/host-ext-test.c]
[finished [parse-files] 0:00:00.939]
[started [parse-decls]]
[finished [parse-decls] 0:00:00.802]
[started [normalise-decls]]
[suspected-numbered-arg-in-notes %core/n-control.c {"break"}]
[suspected-numbered-arg-in-notes %core/n-control.c {"case"}]
[suspected-numbered-arg-in-notes %core/n-control.c {"exit"}]
[suspected-numbered-arg-in-notes %core/n-system.c {"quit"}]
[suspected-numbered-arg-in-notes %core/n-system.c {"do_codec"}]
[finished [normalise-decls] 0:00:00.244]
[started [index-decls]]
[finished [index-decls] 0:00:00.003]
[finished [c-source/process] 0:00:01.991]
[words-missing-specs [action in-context native]]
[words-missing-rebnatives []]
[finished [init] 0:00:02.005]
[started [code]]
[line-width-exceeded non-intro "%core/a-lib.c" "RL_Start" {REBYTE *bin, REBINT len, REBYTE *script, REBINT script_len, REBCNT flags}]
[line-width-exceeded non-intro "%core/a-lib.c" "RL_Do_String" {int *exit_status, const REBYTE *text, REBCNT flags, RXIARG *result}]
[line-width-exceeded non-intro "%core/a-lib.c" "RL_Do_Binary" {int *exit_status, const REBYTE *bin, REBINT length, REBCNT flags, REBCNT key, RXIARG *result}]
[line-width-exceeded intro "%core/a-lib.c" "RL_Map_Words" "REBSER *series"]
[line-width-exceeded intro "%core/a-lib.c" "RL_Find_Word" "u32 *words, u32 word"]
[line-width-exceeded intro "%core/a-lib.c" "RL_Set_Field" "REBSER *obj, u32 word, RXIARG val, int type"]
[line-width-exceeded non-intro "%core/a-lib.c" "RL_Length_As_UTF8" "const void *p, REBCNT len, REBOOL uni, REBOOL ccr"]
[line-width-exceeded non-intro "%core/a-lib.c" "RL_Encode_UTF8" {REBYTE *dst, REBINT max, const void *src, REBCNT *len, REBFLG uni, REBFLG ccr}]
[line-width-exceeded non-intro "%core/c-do.c" "Do_Core" {REBVAL * const out, REBFLG next, REBSER *block, REBCNT index, REBFLG lookahead}]
[line-width-exceeded non-intro "%core/c-do.c" "Reduce_Block_Throws" {REBVAL *out, REBSER *block, REBCNT index, REBOOL into}]
[line-width-exceeded non-intro "%core/c-do.c" "Reduce_Only" {REBVAL *out, REBSER *block, REBCNT index, REBVAL *words, REBOOL into}]
[line-width-exceeded non-intro "%core/c-do.c" "Reduce_Block_No_Set_Throws" {REBVAL *out, REBSER *block, REBCNT index, REBOOL into}]
[line-width-exceeded non-intro "%core/c-do.c" "Compose_Block_Throws" {REBVAL *out, REBVAL *block, REBFLG deep, REBFLG only, REBOOL into}]
[line-width-exceeded non-intro "%core/c-do.c" "Apply_Block_Throws" {REBVAL *out, const REBVAL *func, REBSER *block, REBCNT index, REBFLG reduce, va_list *varargs}]
[line-width-exceeded non-intro "%core/c-error.c" "Error_Arg_Type" {const struct Reb_Call *call, const REBVAL *param, const REBVAL *arg_type}]
[line-width-exceeded non-intro "%core/c-frame.c" "Collect_Frame_Inner_Loop" "REBINT *binds, REBVAL value[], REBCNT modes"]
[line-width-exceeded non-intro "%core/c-frame.c" "Collect_Words_Inner_Loop" "REBINT *binds, REBVAL value[], REBCNT modes"]
[line-width-exceeded non-intro "%core/c-frame.c" "Resolve_Context" {REBSER *target, REBSER *source, REBVAL *only_words, REBFLG all, REBFLG expand}]
[line-width-exceeded non-intro "%core/c-frame.c" "Bind_Values_Inner_Loop" {REBINT *binds, REBVAL value[], REBSER *frame, REBCNT mode}]
[line-width-exceeded non-intro "%core/c-frame.c" "Bind_Relative_Inner_Loop" "REBINT *binds, REBSER *frame, REBSER *block"]
[line-width-exceeded non-intro "%core/c-frame.c" "Rebind_Block" {REBSER *src_frame, REBSER *dst_frame, REBVAL *data, REBFLG modes}]
[line-width-exceeded non-intro "%core/c-function.c" "Make_Function" {REBVAL *out, enum Reb_Kind type, const REBVAL *spec, const REBVAL *body, REBFLG has_return}]
[line-width-exceeded non-intro "%core/c-word.c" "Val_Init_Word" {REBVAL *value, REBCNT type, REBINT sym, REBSER *frame, REBCNT index}]
[line-width-exceeded non-intro "%core/d-crash.c" "Panic_Core" "REBCNT id, REBSER *maybe_frame, va_list *args"]
[line-width-exceeded non-intro "%core/d-print.c" "Probe_Core_Debug" {const char *msg, const char *file, int line, const REBVAL *val}]
[line-width-exceeded non-intro "%core/f-blocks.c" "Clonify_Values_Len_Managed" {REBVAL value[], REBCNT len, REBOOL deep, REBU64 types}]
[line-width-exceeded non-intro "%core/f-blocks.c" "Copy_Array_Core_Managed" {REBSER *block, REBCNT index, REBCNT tail, REBOOL deep, REBU64 types}]
[line-width-exceeded non-intro "%core/f-enbase.c" "Decode_Binary" {REBVAL *value, const REBYTE *src, REBCNT len, REBINT base, REBYTE delim}]
[line-width-exceeded non-intro "%core/f-extension.c" "Make_Command" {REBVAL *out, const REBVAL *spec, const REBVAL *extension, const REBVAL *command_num}]
[line-width-exceeded intro "%core/f-extension.c" "REBNATIVE" "do_commands"]
[line-width-exceeded non-intro "%core/f-math.c" "Form_Int_Pad" {REBYTE *buf, REBI64 val, REBINT max, REBINT len, REBYTE pad}]
[line-width-exceeded non-intro "%core/f-math.c" "Emit_Decimal" {REBYTE *cp, REBDEC d, REBFLG trim, REBYTE point, REBINT decimal_digits}]
[line-width-exceeded non-intro "%core/f-modify.c" "Modify_Array" {REBCNT action, REBSER *dst_ser, REBCNT dst_idx, const REBVAL *src_val, REBCNT flags, REBINT dst_len, REBINT dups}]
[line-width-exceeded non-intro "%core/f-modify.c" "Modify_String" {REBCNT action, REBSER *dst_ser, REBCNT dst_idx, const REBVAL *src_val, REBCNT flags, REBINT dst_len, REBINT dups}]
[line-width-exceeded non-intro "%core/f-series.c" "Do_Series_Action" {struct Reb_Call *call_, REBCNT action, REBVAL *value, REBVAL *arg}]
[line-width-exceeded non-intro "%core/f-stubs.c" "Val_Init_Series_Index_Core" {REBVAL *value, enum Reb_Kind type, REBSER *series, REBCNT index}]
[line-width-exceeded non-intro "%core/l-scan.c" "Scan_Quote" {REBSER *buf, const REBYTE *src, SCAN_STATE *scan_state}]
[line-width-exceeded non-intro "%core/l-scan.c" "Scan_Item" {const REBYTE *src, const REBYTE *end, REBUNI term, const REBYTE *invalid}]
[line-width-exceeded non-intro "%core/l-scan.c" "Error_Bad_Scan" {REBCNT errnum, SCAN_STATE *ss, REBCNT tkn, const REBYTE *arg, REBCNT size}]
[line-width-exceeded non-intro "%core/l-scan.c" "Init_Scan_State" {SCAN_STATE *scan_state, const REBYTE *cp, REBCNT limit}]
[line-width-exceeded non-intro "%core/l-types.c" "Scan_Hex" {REBI64 *out, const REBYTE *cp, REBCNT minlen, REBCNT maxlen}]
[line-width-exceeded non-intro "%core/l-types.c" "Scan_Decimal" {REBDEC *out, const REBYTE *cp, REBCNT len, REBFLG dec_only}]
[line-width-exceeded non-intro "%core/l-types.c" "Scan_Any" {const REBYTE *cp, REBCNT len, REBVAL *value, REBYTE type}]
[line-width-exceeded non-intro "%core/l-types.c" "Append_Markup" {REBSER *series, enum Reb_Kind type, const REBYTE *bp, REBINT len}]
[line-width-exceeded non-intro "%core/m-gc.c" "Queue_Mark_Field_Deep" "const REBSTU *stu, struct Struct_Field *field"]
[line-width-exceeded non-intro "%core/m-pools.c" "Series_Data_Alloc" {REBSER *series, REBCNT length, REBYTE wide, REBCNT flags}]
[line-width-exceeded non-intro "%core/m-series.c" "Insert_Series" {REBSER *series, REBCNT index, const REBYTE *data, REBCNT len}]
[line-width-exceeded non-intro "%core/m-series.c" "Append_Mem_Extra" {REBSER *series, const REBYTE *data, REBCNT len, REBCNT extra}]
[line-width-exceeded non-intro "%core/m-stacks.c" "Make_Call" {REBVAL *out, REBSER *block, REBCNT index, const REBVAL *label, const REBVAL *func}]
[line-width-exceeded intro "%core/n-control.c" "REBNATIVE" "comment"]
[line-width-exceeded intro "%core/n-control.c" "REBNATIVE" "compose"]
[line-width-exceeded intro "%core/n-data.c" "REBNATIVE" "latin1q"]
[line-width-exceeded intro "%core/n-data.c" "REBNATIVE" "map_gob_offset"]
[line-width-exceeded intro "%core/n-io.c" "REBNATIVE" "call"]
[line-width-exceeded intro "%core/n-io.c" "REBNATIVE" "request_file"]
[line-width-exceeded intro "%core/n-io.c" "REBNATIVE" "set_env"]
[line-width-exceeded intro "%core/n-io.c" "REBNATIVE" "access_os"]
[line-width-exceeded non-intro "%core/n-loop.c" "Loop_Series_Throws" {REBVAL *out, REBVAL *var, REBSER* body, REBVAL *start, REBINT ei, REBINT ii}]
[line-width-exceeded non-intro "%core/n-loop.c" "Loop_Integer_Throws" {REBVAL *out, REBVAL *var, REBSER* body, REBI64 start, REBI64 end, REBI64 incr}]
[line-width-exceeded non-intro "%core/n-loop.c" "Loop_Number_Throws" {REBVAL *out, REBVAL *var, REBSER* body, REBVAL *start, REBVAL *end, REBVAL *incr}]
[line-width-exceeded intro "%core/n-loop.c" "REBNATIVE" "map_each"]
[line-width-exceeded non-intro "%core/n-math.c" "Arc_Trans" {REBVAL *out, const REBVAL *value, REBOOL degrees, REBCNT kind}]
[line-width-exceeded intro "%core/n-math.c" "REBNATIVE" "lesser_or_equalq"]
[line-width-exceeded intro "%core/n-math.c" "REBNATIVE" "greater_or_equalq"]
[line-width-exceeded non-intro "%core/n-sets.c" "Make_Set_Operation_Series" {const REBVAL *val1, const REBVAL *val2, REBCNT flags, REBCNT cased, REBCNT skip}]
[line-width-exceeded non-intro "%core/p-clipboard.c" "Clipboard_Actor" {struct Reb_Call *call_, REBSER *port, REBCNT action}]
[line-width-exceeded non-intro "%core/p-dir.c" "Init_Dir_Path" {REBREQ *dir, REBVAL *path, REBINT wild, REBCNT policy}]
[line-width-exceeded non-intro "%core/p-file.c" "Read_File_Port" {REBVAL *out, REBSER *port, REBREQ *file, REBVAL *path, REBCNT args, REBCNT len}]
[line-width-exceeded non-intro "%core/p-file.c" "Write_File_Port" {REBREQ *file, REBVAL *data, REBCNT len, REBCNT args}]
[line-width-exceeded non-intro "%core/p-net.c" "Transport_Actor" {struct Reb_Call *call_, REBSER *port, REBCNT action, enum Transport_Types proto}]
[line-width-exceeded non-intro "%core/s-find.c" "Compare_Bytes" {const REBYTE *b1, const REBYTE *b2, REBCNT len, REBOOL uncase}]
[line-width-exceeded non-intro "%core/s-find.c" "Find_Byte_Str" {REBSER *series, REBCNT index, REBYTE *b2, REBCNT l2, REBFLG uncase, REBFLG match}]
[line-width-exceeded non-intro "%core/s-find.c" "Find_Str_Str" {REBSER *ser1, REBCNT head, REBCNT index, REBCNT tail, REBINT skip, REBSER *ser2, REBCNT index2, REBCNT len, REBCNT flags}]
[line-width-exceeded non-intro "%core/s-find.c" "Find_Str_Char" {REBSER *ser, REBCNT head, REBCNT index, REBCNT tail, REBINT skip, REBUNI c2, REBCNT flags}]
[line-width-exceeded non-intro "%core/s-find.c" "Find_Str_Bitset" {REBSER *ser, REBCNT head, REBCNT index, REBCNT tail, REBINT skip, REBSER *bset, REBCNT flags}]
[line-width-exceeded non-intro "%core/s-make.c" "Insert_String" {REBSER *dst, REBCNT idx, const REBSER *src, REBCNT pos, REBCNT len, REBFLG no_expand}]
[line-width-exceeded non-intro "%core/s-ops.c" "Temp_Byte_Chars_May_Fail" {const REBVAL *val, REBINT max_len, REBCNT *length, REBINT opts}]
[line-width-exceeded non-intro "%core/s-ops.c" "Cloak" {REBOOL decode, REBYTE *cp, REBCNT dlen, REBYTE *kp, REBCNT klen, REBFLG as_is}]
[line-width-exceeded non-intro "%core/s-trim.c" "trim_head_tail" {REBSER *ser, REBCNT index, REBCNT tail, REBFLG h, REBFLG t}]
[line-width-exceeded non-intro "%core/s-trim.c" "Trim_String" {REBSER *ser, REBCNT index, REBCNT len, REBCNT flags, REBVAL *with}]
[line-width-exceeded non-intro "%core/s-unicode.c" "Encode_UTF8" {REBYTE *dst, REBCNT max, const void *src, REBCNT *len, REBFLG opts}]
[line-width-exceeded non-intro "%core/s-unicode.c" "Make_UTF8_Binary" {const void *data, REBCNT len, REBCNT extra, REBFLG opts}]
[line-width-exceeded non-intro "%core/t-block.c" "Find_Block" {REBSER *series, REBCNT index, REBCNT end, const REBVAL *target, REBCNT len, REBCNT flags, REBINT skip}]
[line-width-exceeded non-intro "%core/t-block.c" "Sort_Block" {REBVAL *block, REBFLG ccase, REBVAL *skipv, REBVAL *compv, REBVAL *part, REBFLG all, REBFLG rev}]
[line-width-exceeded non-intro "%core/t-date.c" "Set_Date_UTC" {REBVAL *val, REBINT y, REBINT m, REBINT d, REBI64 t, REBINT z}]
[line-width-exceeded non-intro "%core/t-event.c" "Set_Event_Var" {REBVAL *value, const REBVAL *word, const REBVAL *val}]
[line-width-exceeded non-intro "%core/t-gob.c" "Insert_Gobs" {REBGOB *gob, const REBVAL *arg, REBCNT index, REBCNT len, REBFLG change}]
[line-width-exceeded non-intro "%core/t-image.c" "Fill_Rect" {REBCNT *ip, REBCNT color, REBCNT w, REBINT dupx, REBINT dupy, REBOOL only}]
[line-width-exceeded non-intro "%core/t-image.c" "Fill_Alpha_Rect" {REBCNT *ip, REBYTE alpha, REBINT w, REBINT dupx, REBINT dupy}]
[line-width-exceeded non-intro "%core/t-image.c" "Bin_To_RGBA" {REBYTE *rgba, REBCNT size, REBYTE *bin, REBINT len, REBOOL only}]
[line-width-exceeded non-intro "%core/t-image.c" "Copy_Rect_Data" {REBVAL *dst, REBINT dx, REBINT dy, REBINT w, REBINT h, REBVAL *src, REBINT sx, REBINT sy}]
[line-width-exceeded non-intro "%core/t-map.c" "Find_Key" {REBSER *series, REBSER *hser, const REBVAL *key, REBINT wide, REBCNT cased, REBYTE mode}]
[line-width-exceeded non-intro "%core/t-string.c" "Sort_String" {REBVAL *string, REBFLG ccase, REBVAL *skipv, REBVAL *compv, REBVAL *part, REBFLG all, REBFLG rev}]
[line-width-exceeded non-intro "%core/t-struct.c" "Set_Struct_Var" {REBSTU *stu, REBVAL *word, REBVAL *elem, REBVAL *val}]
[line-width-exceeded non-intro "%core/t-vector.c" "Make_Vector" {REBINT type, REBINT sign, REBINT dims, REBINT bits, REBINT size}]
[line-width-exceeded non-intro "%core/u-compress.c" "Compress" {REBSER *input, REBINT index, REBCNT len, REBFLG gzip, REBFLG raw}]
[line-width-exceeded non-intro "%core/u-compress.c" "Decompress" {const REBYTE *input, REBCNT len, REBINT max, REBFLG gzip, REBFLG raw}]
[line-width-exceeded non-intro "%core/u-gif.c" "Decode_LZW" {REBCNT *data, REBYTE **cpp, REBYTE *colortab, REBINT w, REBINT h, REBOOL interlaced}]
[line-width-exceeded non-intro "%core/u-parse.c" "Parse_Next_String" {REBPARSE *parse, REBCNT index, const REBVAL *item, REBCNT depth}]
[line-width-exceeded non-intro "%core/u-parse.c" "Parse_Next_Block" {REBPARSE *parse, REBCNT index, const REBVAL *item, REBCNT depth}]
[line-width-exceeded non-intro "%core/u-parse.c" "To_Thru" {REBPARSE *parse, REBCNT index, const REBVAL *block, REBFLG is_thru}]
[line-width-exceeded non-intro "%core/u-parse.c" "Parse_To" {REBPARSE *parse, REBCNT index, const REBVAL *item, REBFLG is_thru}]
[line-width-exceeded non-intro "%core/u-parse.c" "Parse_Rules_Loop" {REBPARSE *parse, REBCNT index, const REBVAL *rules, REBCNT depth}]
[line-width-exceeded intro "%os/generic/host-gob.c" "As_OS_Str" "REBSER *series, REBCHR **string"]
[line-width-exceeded non-intro "%os/posix/host-process.c" "OS_Create_Process" {const REBCHR *call, int argc, const REBCHR* argv[], u32 flags, u64 *pid, int *exit_code, u32 input_type, char *input, u32 input_len, u32 output_type, char **output, u32 *output_len, u32 err_type, char **err, u32 *err_len}]
[line-width-exceeded non-intro "%os/posix/host-window.c" "OS_Offset_To_Caret" {REBGOB *gob, REBPAR xy, REBINT *element, REBINT *position}]
[line-width-exceeded non-intro "%os/posix/host-window.c" "OS_Caret_To_Offset" {REBGOB *gob, REBPAR *xy, REBINT element, REBINT position}]
[line-width-exceeded non-intro "%os/windows/dev-event.c" "REBOL_Event_Proc" "HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam"]
[line-width-exceeded non-intro "%os/windows/host-lib.c" "OS_Create_Process" {const REBCHR *call, int argc, const REBCHR* argv[], u32 flags, u64 *pid, int *exit_code, u32 input_type, char *input, u32 input_len, u32 output_type, char **output, u32 *output_len, u32 err_type, char **err, u32 *err_len}]
[line-width-exceeded intro "%os/windows/host-lib.c" "As_OS_Str" "REBSER *series, REBCHR **string"]
[finished [code] 0:00:00.137]
[started [files]]
[line-length-over-127 "%core/c-frame.c" [1388]]
[line-length-over-127 "%core/f-modify.c" [47 137]]
[line-length-over-127 "%core/m-pools.c" [549 1505]]
[line-length-over-127 "%core/s-crc.c" [521]]
[line-length-over-127 "%core/s-find.c" [364]]
[line-length-over-127 "%core/t-string.c" [123 125]]
[line-length-over-127 "%core/t-struct.c" [787]]
[line-length-over-127 "%core/u-parse.c" [413]]
[line-length-over-127 "%os/dev-dns.c" [110]]
[line-length-over-127 "%os/host-core.c" [375]]
[line-length-over-127 "%os/posix/host-process.c" [290]]
[line-length-over-127 "%os/windows/host-lib.c" [685]]
[finished [files] 0:00:00.261]
[stats [parsed: 134 not-parsed: 5 decl-updated: 1271 files-written: 121 width-exceeded: 17]]